apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: tandoor-recipes
  namespace: tandoor
spec:
  interval: 30m
  chart:
    spec:
      chart: tandoor
      sourceRef:
        kind: HelmRepository
        name: gabe565-charts
        namespace: flux-system
      version: "0.9.9"
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    image:
      repository: ghcr.io/tandoorrecipes/recipes
      pullPolicy: IfNotPresent

    # Environment variables for Tandoor
    # Refer to:
    # 1. Tandoor's .env.template: https://github.com/TandoorRecipes/recipes/blob/master/.env.template
    # 2. The chart's values.yaml for how it structures these (often under an 'env' block or direct keys)
    env:
      # CRITICAL: Set a strong, unique secret key
      SECRET_KEY: "0N+Agm+L8+O2t9NjcMxf8KA2VcgVr6Hn9cEDFroTQ8g="
      TIMEZONE: "America/Chicago" # Set your timezone, e.g., "Europe/Berlin", "UTC"
      DEBUG: "False"
      ALLOWED_HOSTS: "tandoor.cowfam.com" # IMPORTANT: Set your access hostname
      # For HTTPS setup (if your ingress terminates SSL)
      SECURE_SSL_REDIRECT: "False" # Set to "False" if not using HTTPS or proxy handles it differently
      IS_HTTPS: "False"          # Set to "False" if not using HTTPS

      # Initial Superuser Creation (Refer to Tandoor & chart docs for exact variable names)
      # The official Tandoor Docker image uses these:
      SUPERUSER_NAME: "admin" # Or your desired admin username
      SUPERUSER_EMAIL: "admin@example.com" # Change to your email
      SUPERUSER_PASSWORD: "password123" # Change this!

      # Database settings are typically auto-configured by the PostgreSQL sub-chart if enabled.
      # Only set DB_ENGINE, POSTGRES_HOST, POSTGRES_USER, etc., if connecting to an EXTERNAL database.
      # DB_ENGINE: "django.db.backends.postgresql"

    # Ingress configuration (using bjw-s common chart structure)
    ingress:
      main: # This is a common name for the main ingress in bjw-s charts
        enabled: true
        # If you have an IngressClass resource for Nginx:
        ingressClassName: "nginx" # Or your specific IngressClass name
        # If using older Kubernetes/Nginx Ingress version, you might use annotations:
        # annotations:
        #   kubernetes.io/ingress.class: "nginx"
        #   cert-manager.io/cluster-issuer: "letsencrypt-prod" # If using cert-manager
        #   nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # If Nginx handles redirect
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: "50m" # Allow larger file uploads (recipe images)
          # Add cert-manager annotations if you've set it up for Let's Encrypt:
          # cert-manager.io/cluster-issuer: "name-of-your-clusterissuer"
          # nginx.ingress.kubernetes.io/ssl-redirect: "true" # Enforce HTTPS

        hosts:
          - host: "tandoor.cowfam.com" # IMPORTANT: Match ALLOWED_HOSTS
            paths:
              - path: /
                pathType: Prefix # Common path type
        tls:
          - secretName: tandoor-tls # Name of the Kubernetes secret containing your TLS cert
            hosts:
              - tandoor.cowfam.com # IMPORTANT: Match the host above

    # Persistence configuration (using bjw-s common chart structure)
    # Tandoor needs to persist media files and static files.
    # Check the Tandoor Docker documentation for volume paths (e.g., /opt/recipes/mediafiles, /opt/recipes/staticfiles)
    # The bjw-s common chart allows defining named persistence volumes.
    persistence:
      mediafiles: # A custom name for this persistent volume
        enabled: true
        mountPath: /opt/recipes/mediafiles # Default Tandoor media path
        # storageClass: "local-path" # Uncomment and set if not using the default StorageClass
        accessMode: ReadWriteOnce
        size: 10Gi # Adjust as needed
      staticfiles: # A custom name for this persistent volume
        enabled: true
        mountPath: /opt/recipes/staticfiles # Default Tandoor static path (collected by Django)
        # storageClass: "local-path" # Uncomment and set if not using the default StorageClass
        accessMode: ReadWriteOnce
        size: 2Gi # Adjust as needed

    # PostgreSQL subchart configuration (this chart includes a Bitnami PostgreSQL dependency)
    postgresql:
      enabled: true # Set to false if you are using an external PostgreSQL
      # auth: # Credentials are auto-generated by default and stored in a secret.
      #   username: "tandoor"
      #   database: "tandoor"
      #   # existingSecret: "" # Use if you have a pre-existing secret for DB credentials
      #   # password: "your-db-password" # Avoid hardcoding if possible
      primary:
        persistence:
          enabled: true
          # storageClassName: "local-path" # Explicitly set if 'local-path' is not your default SC
          size: 8Gi # Adjust as needed for your database

    # Resource requests and limits for the Tandoor application pod
    resources:
      limits:
        # cpu: "1" # Example: 1 CPU core
        memory: "1Gi" # Example: 1 GiB RAM
      requests:
        # cpu: "250m" # Example: 0.25 CPU core
        memory: "512Mi" # Example: 512 MiB RAM

    # strategy:
    #   type: Recreate # Tandoor might benefit from Recreate strategy due to Django migrations
                      # RollingUpdate is default; test what works best.